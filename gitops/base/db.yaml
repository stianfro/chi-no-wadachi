apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql
spec:
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
    spec:
      containers:
      - name: postgresql
        image: postgres
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 5432
        volumeMounts:
          - name: config-volume
            mountPath: /docker-entrypoint-initdb.d/
          - name: data-volume
            mountPath: /var/lib/postgresql/data
      volumes:
        - name: config-volume
          configMap:
            name: postgresql-config
        - name: data-volume
          persistentVolumeClaim:
            claimName: postgresql-data
---
apiVersion: v1
kind: Service
metadata:
  name: postgresql
spec:
  selector:
    app: postgresql
  ports:
  - port: 5432
    targetPort: 5432
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-config
data:
  init.sql: |
    CREATE TABLE manga (
      id TEXT PRIMARY KEY,
      title TEXT NOT NULL,
      author TEXT NOT NULL,
      magazine TEXT NOT NULL,
      publisher TEXT NOT NULL
    );
    CREATE TABLE manga_volumes (
      id TEXT PRIMARY KEY,
      manga_id TEXT NOT NULL,
      number INTEGER NOT NULL,
      title TEXT NOT NULL,
      release_date TEXT NOT NULL,
      isbn TEXT NOT NULL,
      FOREIGN KEY (manga_id)
        REFERENCES manga(id)
    );
    CREATE TABLE manga_chapters (
      id TEXT PRIMARY KEY,
      volume_id TEXT NOT NULL,
      number INTEGER NOT NULL,
      title TEXT NOT NULL,
      FOREIGN KEY (volume_id)
        REFERENCES manga_volumes(id)
    )
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgresql-data
spec:
  resources:
    requests:
      storage: 100Mi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
