basePath: /api/v1
definitions:
  models.Manga:
    properties:
      author:
        description: Author is the author of the manga
        type: string
      id:
        description: ID is the manga ID used to make it unique in the database
        type: string
      magazine:
        description: Magazine is the magazine the manga was published in
        type: string
      publisher:
        description: Publisher is the publisher of the manga
        type: string
      title:
        description: Title is the title of the manga
        type: string
    required:
    - author
    - magazine
    - publisher
    - title
    type: object
info:
  contact: {}
  description: This is a simple API that is used to demonstrate how to use Chi as
    a web framework.
  license:
    name: MIT
  title: Chi No Wadachi API
  version: 1.0.0
paths:
  /api/v1/manga:
    get:
      description: Lists all manga in the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Manga'
            type: array
      summary: List all manga
      tags:
      - manga
    post:
      consumes:
      - application/json
      description: Creates a manga in the database
      parameters:
      - description: Manga
        in: body
        name: manga
        required: true
        schema:
          $ref: '#/definitions/models.Manga'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Manga'
      summary: Create a manga
      tags:
      - manga
  /healthz:
    get:
      description: simple health check handler that returns 200 OK and is used for
        Kubernetes liveness probes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Health Check
      tags:
      - health
swagger: "2.0"
